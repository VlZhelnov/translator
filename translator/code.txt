void main(){
	int[10] arr; int[] res; long N; int i; int seed;
	i = 0; N=10; seed = 2;
	while(i < N){
		arr[i] = rand(seed);
		seed = arr[i];
		i = i + 1;
	}
	res = booblesort(arr, N);
	res = binsearch(res, N, 18);
	N = fibonacci(10);
	N = factorial(10);
}	

int rand(int seed){
	return (45 * seed + 21) % 67;
}

int[] booblesort(int[] arr, int N){
	
	int tmp; int i; int j; 

	i = 1;
	while ( i < N ){
		j = i;
		while ( j > 0 ) {
			if  ( arr[j] < arr[j - 1]){
				tmp = arr[j];
				arr[j] = arr[j - 1];
				arr[j - 1] = tmp;
			}
			j = j - 1;
		}
		i = i + 1;
	}
	return arr;
}
int binsearch(int[] arr, int N, int find){
	int l; int r; int m;
	l = -1; r = N;
	while ( l < r - 1 ){
		m = (l + r) / 2;
		if  ( arr[m] > find ){
			r = m;
		} else {
			l = m;
		}
	}
	return l;	
}

int factorial(int n){
	if (n < 2){return 1;}
	return n * factorial(n - 1);
}

int fibonacci(int n){
	if ( n == 1 || n == 2  ){ return 1; }
	return fibonacci(n - 1) + fibonacci(n - 2);
}



